generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(name: "Accounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model ResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model User {
  id            String    @id @default(uuid())
  name          String    @unique @default(uuid())
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String    @default("/default.png")
  bio           String?   @db.Text

  accounts Account[] @relation("Accounts")

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("Blocked")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blocker   User   @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User   @relation(name: "Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
